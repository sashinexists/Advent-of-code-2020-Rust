{
  "year": 2020,
  "day": 8,
  "level": "second",
  "title": "Handheld Halting",
  "stars": 2,
  "input": "acc -1\njmp +1\njmp +117\njmp +70\njmp +473\nacc +11\nacc +48\nacc -10\nacc -2\njmp +253\njmp +597\nacc -19\nacc -5\njmp +328\nacc +41\nacc +23\nacc +35\nacc +24\njmp +465\nacc +20\nnop +338\nacc +17\njmp +1\njmp +549\nacc +15\njmp +131\nacc +35\njmp +63\nacc +29\njmp +81\nacc +30\nacc +16\njmp +75\njmp +28\nacc +20\nacc -13\njmp +1\njmp +79\nacc +16\nacc -5\njmp -36\nnop +361\nacc +33\nacc +46\njmp +270\nacc +12\nacc +13\nacc +2\njmp +254\nacc +37\nacc -10\nacc +2\nacc +27\njmp +535\nacc +18\nacc +32\njmp +252\nacc -2\njmp +1\nacc -6\njmp +565\nacc +40\njmp +200\nacc -15\nnop +419\nnop +265\njmp +340\nacc +46\nacc +23\nnop +527\nacc +32\njmp +202\njmp +47\nacc +12\njmp +493\njmp -71\nnop +491\nacc +18\njmp +38\njmp +5\nnop +311\njmp -43\nnop +197\njmp +275\nacc +40\nacc +27\njmp +440\nacc +7\nacc +44\njmp +131\nacc +2\njmp +283\njmp +415\nacc -12\nacc -4\nacc -8\nacc +40\njmp -30\nacc +43\nnop -15\nacc -2\njmp +74\njmp +421\njmp +1\nacc +16\nacc +23\njmp -96\nacc -9\njmp +181\njmp +1\njmp +482\nacc -5\nacc +15\nacc +8\nacc +12\njmp +323\nacc -16\njmp +417\njmp +483\nacc +0\nacc +31\nacc +11\nacc -9\njmp +46\nacc +50\nacc +41\njmp +153\nacc +12\nacc +23\nacc -6\nacc +38\njmp +191\nacc +28\nnop +75\njmp +462\nacc +40\nnop -52\njmp +404\nacc +16\nnop +273\njmp +105\nacc +8\nacc -4\njmp -59\nacc +47\nacc +0\njmp +1\njmp -45\nacc +15\nacc -14\nnop +373\nacc +25\njmp -50\nacc +43\nnop +154\njmp +368\nacc +32\nacc -2\nacc +28\njmp +273\nacc -9\njmp +1\nnop -69\njmp +82\nacc +20\njmp +1\njmp +282\nacc +14\njmp +296\nnop +61\njmp +1\nacc +9\njmp +202\nacc -2\njmp +441\nacc +23\nacc +16\nacc +12\nnop -117\njmp +247\nacc +19\nacc -10\nacc -15\nacc +39\njmp +213\nacc -18\nacc +29\njmp -80\nacc +43\nacc +10\nacc +47\njmp +98\nacc +49\nacc +17\nacc +24\njmp +430\nacc -11\nacc +36\nacc -5\nacc +23\njmp +108\nacc -14\njmp +10\nacc +31\nacc +1\nacc +3\nacc +5\njmp +184\nacc +48\njmp +70\nacc +13\njmp +130\nacc +26\nacc +29\nacc +25\njmp +165\nnop +112\nacc +11\nacc +6\njmp +103\njmp +1\nacc -2\nacc +31\nacc +0\njmp +123\nacc -12\nacc -5\nacc -11\nnop -161\njmp +112\nacc +10\nacc +19\njmp +132\njmp -157\nnop +80\njmp +101\nacc +12\nacc +39\nacc -11\njmp -75\nnop -10\njmp +179\nacc +37\nacc -14\njmp +204\nnop +380\nacc +1\nacc +43\nacc +18\njmp -41\nacc -8\nacc +32\nacc +50\nnop -45\njmp +233\nnop -182\nacc +16\nacc +16\njmp -131\nacc +17\nacc +21\njmp +92\njmp +179\nacc -14\njmp +296\nacc +44\nacc -5\nnop +12\njmp +134\nacc +39\nnop -30\nacc +31\njmp -131\nacc +7\nacc +46\nacc +14\nnop +82\njmp -187\njmp +242\nnop +178\nacc -17\nacc -8\nnop +267\njmp +101\nnop -50\njmp +1\nacc -19\nacc +10\njmp -172\nacc +20\nacc +39\nacc +46\nacc +41\njmp +340\njmp -266\nacc +46\nnop +45\nacc +15\nacc +16\njmp +158\nacc +21\njmp +300\nacc +35\njmp +190\nnop -70\nacc +49\nacc +31\njmp +184\njmp +275\nacc +8\nnop -76\nacc +30\nacc +9\njmp -5\nacc +28\nacc +19\njmp +37\nacc +5\nacc +5\nnop -200\nnop +281\njmp -202\nacc -4\nacc -7\nacc +0\njmp -252\nacc +7\njmp +298\njmp +279\njmp +7\nacc +30\nacc -6\nacc -19\njmp +201\nacc +33\njmp +12\nacc +47\nacc +20\nacc +43\njmp +268\njmp +124\nacc +17\nacc +0\nacc +21\nacc +34\njmp +227\njmp -313\nacc -6\nacc +43\njmp +1\njmp -22\nnop +162\njmp +161\njmp -339\nacc -12\nnop +109\nacc +21\njmp -149\nnop -128\nnop +199\njmp -327\nnop +165\nacc +19\njmp -302\nacc +26\nnop +67\njmp -52\nnop -353\nacc -4\njmp -200\njmp +245\nacc +38\nacc +3\njmp -232\nacc +36\njmp +1\nacc +20\njmp -157\nacc -14\njmp -114\njmp -66\nnop -59\nacc +44\njmp -42\nacc +40\nnop -90\njmp -306\nacc -7\nnop -24\nacc -17\njmp -226\nacc +8\nacc +39\njmp +106\njmp +1\nacc +27\njmp -60\nacc -10\njmp +1\njmp -366\nacc +29\njmp -325\njmp -28\nacc +34\nacc +35\njmp -3\nacc +30\nacc -9\nacc +33\nacc -5\njmp +62\njmp +147\nacc +43\nacc +37\nnop +120\nacc +21\njmp +172\nacc +22\nacc +36\njmp -105\nnop +37\nacc +40\nnop +26\njmp -288\nacc +6\njmp +98\nnop -278\nacc +17\nacc -11\njmp -99\nnop -416\njmp -364\njmp +145\nacc +23\nacc -18\nacc -13\nacc +8\njmp +112\nacc +34\njmp -411\njmp -255\nacc +23\nacc +1\nacc +30\njmp +152\nnop -225\nacc +3\njmp -217\nacc +37\nacc -10\nacc -1\nnop -81\njmp +12\nacc -3\nacc +41\nacc +12\njmp +151\nacc +20\nacc +10\njmp -229\nacc +0\nacc +12\nacc +0\njmp +24\nacc +35\nacc +21\nacc -13\njmp +40\nacc +48\nacc -9\nacc +4\njmp -30\nacc +1\nnop -440\nacc +36\njmp -241\njmp +15\nacc +5\nnop +147\nacc +37\nacc +12\njmp -457\njmp +85\njmp -308\njmp +1\nacc +33\njmp -221\njmp +114\nacc +29\nnop -142\njmp -42\njmp -415\njmp -328\njmp -345\nacc +23\nacc +3\nacc +13\njmp +1\njmp -233\nacc +9\nacc -9\njmp +59\nnop -15\nacc +17\nacc +32\nacc +39\njmp -251\nacc +24\nacc +26\nacc +0\nacc +27\njmp -319\njmp +46\nacc +35\nnop -134\nacc +37\njmp -104\nacc +5\nacc +21\njmp +48\nacc -2\njmp -83\njmp -415\nacc +0\njmp -154\njmp -285\nacc +5\nacc -2\nacc +27\njmp -519\nacc -16\nacc +31\nacc +20\njmp -34\nacc +3\nacc +20\njmp -344\nacc +0\nacc -19\nacc -5\njmp -310\nacc +17\nacc +42\nacc +11\njmp -490\nacc +47\nacc +44\nacc -1\njmp +12\nacc +34\nnop -512\nacc +33\njmp -61\nacc +43\nacc -2\nacc -16\nacc +10\njmp -327\njmp -45\njmp -147\nacc +33\njmp -203\nacc +17\nacc -8\nnop +19\nacc +20\njmp -164\nacc +11\nacc +18\nacc +50\njmp -330\njmp -326\nacc +43\nacc +42\nacc +22\njmp -310\njmp -248\nnop -219\nacc -7\nacc +21\njmp -183\nacc +0\njmp +6\nacc +13\njmp -339\nacc -17\nacc -7\njmp -471\njmp -387\nacc -4\nacc +50\njmp -250\njmp -407\nnop -1\njmp +1\njmp -157\nacc +45\nnop -456\nacc +28\njmp -41\njmp -370\njmp -482\nacc -17\nacc +11\nacc +18\nacc +15\njmp -29\nacc +31\nacc +48\njmp -564\nacc +47\njmp +1\nacc +8\nacc +27\njmp -26\nacc +23\nacc +0\nacc +12\nacc +17\njmp -364\nacc -4\nacc +50\nacc -10\nnop -393\njmp -531\nnop -118\nnop -256\nnop -551\nacc +36\njmp -536\nacc -6\nacc +44\njmp -530\nacc -5\nacc +16\nacc +19\njmp +1\njmp +1\n",
  "brief": {
    "first": "\\--- Day 8: Handheld Halting ---\n----------\n\nYour flight to the major airline hub reaches cruising altitude without incident. While you consider checking the in-flight menu for one of those drinks that come with a little umbrella, you are interrupted by the kid sitting next to you.\n\nTheir [handheld game console](https://en.wikipedia.org/wiki/Handheld_game_console) won't turn on! They ask if you can take a look.\n\nYou narrow the problem down to a strange *infinite loop* in the boot code (your puzzle input) of the device. You should be able to fix it, but first you need to be able to run the code in isolation.\n\nThe boot code is represented as a text file with one *instruction* per line of text. Each instruction consists of an *operation* (`acc`, `jmp`, or `nop`) and an *argument* (a signed number like `+4` or `-20`).\n\n* `acc` increases or decreases a single global value called the *accumulator* by the value given in the argument. For example, `acc +7` would increase the accumulator by 7. The accumulator starts at `0`. After an `acc` instruction, the instruction immediately below it is executed next.\n* `jmp` *jumps* to a new instruction relative to itself. The next instruction to execute is found using the argument as an *offset* from the `jmp` instruction; for example, `jmp +2` would skip the next instruction, `jmp +1` would continue to the instruction immediately below it, and `jmp -20` would cause the instruction 20 lines above to be executed next.\n* `nop` stands for *No OPeration* - it does nothing. The instruction immediately below it is executed next.\n\nFor example, consider the following program:\n\n```\nnop +0\nacc +1\njmp +4\nacc +3\njmp -3\nacc -99\nacc +1\njmp -4\nacc +6\n\n```\n\nThese instructions are visited in this order:\n\n```\nnop +0  | 1\nacc +1  | 2, 8(!)\njmp +4  | 3\nacc +3  | 6\njmp -3  | 7\nacc -99 |\nacc +1  | 4\njmp -4  | 5\nacc +6  |\n\n```\n\nFirst, the `nop +0` does nothing. Then, the accumulator is increased from 0 to 1 (`acc +1`) and `jmp +4` sets the next instruction to the other `acc +1` near the bottom. After it increases the accumulator from 1 to 2, `jmp -4` executes, setting the next instruction to the only `acc +3`. It sets the accumulator to 5, and `jmp -3` causes the program to continue back at the first `acc +1`.\n\nThis is an *infinite loop*: with this sequence of jumps, the program will run forever. The moment the program tries to run any instruction a second time, you know it will never terminate.\n\nImmediately *before* the program would run an instruction a second time, the value in the accumulator is *`5`*.\n\nRun your copy of the boot code. Immediately before any instruction is executed a second time, *what value is in the accumulator?*\n\nYour puzzle answer was `2014`.\n\nThe first half of this puzzle is complete! It provides one gold star: \\*\n\n\\--- Part Two ---\n----------\n\nAfter some careful analysis, you believe that *exactly one instruction is corrupted*.\n\nSomewhere in the program, *either* a `jmp` is supposed to be a `nop`, *or* a `nop` is supposed to be a `jmp`. (No `acc` instructions were harmed in the corruption of this boot code.)\n\nThe program is supposed to terminate by *attempting to execute an instruction immediately after the last instruction in the file*. By changing exactly one `jmp` or `nop`, you can repair the boot code and make it terminate correctly.\n\nFor example, consider the same program from above:\n\n```\nnop +0\nacc +1\njmp +4\nacc +3\njmp -3\nacc -99\nacc +1\njmp -4\nacc +6\n\n```\n\nIf you change the first instruction from `nop +0` to `jmp +0`, it would create a single-instruction infinite loop, never leaving that instruction. If you change almost any of the `jmp` instructions, the program will still eventually find another `jmp` instruction and loop forever.\n\nHowever, if you change the second-to-last instruction (from `jmp -4` to `nop -4`), the program terminates! The instructions are visited in this order:\n\n```\nnop +0  | 1\nacc +1  | 2\njmp +4  | 3\nacc +3  |\njmp -3  |\nacc -99 |\nacc +1  | 4\nnop -4  | 5\nacc +6  | 6\n\n```\n\nAfter the last instruction (`acc +6`), the program terminates by attempting to run the instruction below the last instruction in the file. With this change, after the program terminates, the accumulator contains the value *`8`* (`acc +1`, `acc +1`, `acc +6`).\n\nFix the program so that it terminates normally by changing exactly one `jmp` (to `nop`) or `nop` (to `jmp`). *What is the value of the accumulator after the program terminates?*\n\nAnswer:\n\nAlthough it hasn't changed, you can still [get your puzzle input](8/input).",
    "second": "\\--- Day 8: Handheld Halting ---\n----------\n\nYour flight to the major airline hub reaches cruising altitude without incident. While you consider checking the in-flight menu for one of those drinks that come with a little umbrella, you are interrupted by the kid sitting next to you.\n\nTheir [handheld game console](https://en.wikipedia.org/wiki/Handheld_game_console) won't turn on! They ask if you can take a look.\n\nYou narrow the problem down to a strange *infinite loop* in the boot code (your puzzle input) of the device. You should be able to fix it, but first you need to be able to run the code in isolation.\n\nThe boot code is represented as a text file with one *instruction* per line of text. Each instruction consists of an *operation* (`acc`, `jmp`, or `nop`) and an *argument* (a signed number like `+4` or `-20`).\n\n* `acc` increases or decreases a single global value called the *accumulator* by the value given in the argument. For example, `acc +7` would increase the accumulator by 7. The accumulator starts at `0`. After an `acc` instruction, the instruction immediately below it is executed next.\n* `jmp` *jumps* to a new instruction relative to itself. The next instruction to execute is found using the argument as an *offset* from the `jmp` instruction; for example, `jmp +2` would skip the next instruction, `jmp +1` would continue to the instruction immediately below it, and `jmp -20` would cause the instruction 20 lines above to be executed next.\n* `nop` stands for *No OPeration* - it does nothing. The instruction immediately below it is executed next.\n\nFor example, consider the following program:\n\n```\nnop +0\nacc +1\njmp +4\nacc +3\njmp -3\nacc -99\nacc +1\njmp -4\nacc +6\n\n```\n\nThese instructions are visited in this order:\n\n```\nnop +0  | 1\nacc +1  | 2, 8(!)\njmp +4  | 3\nacc +3  | 6\njmp -3  | 7\nacc -99 |\nacc +1  | 4\njmp -4  | 5\nacc +6  |\n\n```\n\nFirst, the `nop +0` does nothing. Then, the accumulator is increased from 0 to 1 (`acc +1`) and `jmp +4` sets the next instruction to the other `acc +1` near the bottom. After it increases the accumulator from 1 to 2, `jmp -4` executes, setting the next instruction to the only `acc +3`. It sets the accumulator to 5, and `jmp -3` causes the program to continue back at the first `acc +1`.\n\nThis is an *infinite loop*: with this sequence of jumps, the program will run forever. The moment the program tries to run any instruction a second time, you know it will never terminate.\n\nImmediately *before* the program would run an instruction a second time, the value in the accumulator is *`5`*.\n\nRun your copy of the boot code. Immediately before any instruction is executed a second time, *what value is in the accumulator?*\n\nYour puzzle answer was `2014`.\n\n\\--- Part Two ---\n----------\n\nAfter some careful analysis, you believe that *exactly one instruction is corrupted*.\n\nSomewhere in the program, *either* a `jmp` is supposed to be a `nop`, *or* a `nop` is supposed to be a `jmp`. (No `acc` instructions were harmed in the corruption of this boot code.)\n\nThe program is supposed to terminate by *attempting to execute an instruction immediately after the last instruction in the file*. By changing exactly one `jmp` or `nop`, you can repair the boot code and make it terminate correctly.\n\nFor example, consider the same program from above:\n\n```\nnop +0\nacc +1\njmp +4\nacc +3\njmp -3\nacc -99\nacc +1\njmp -4\nacc +6\n\n```\n\nIf you change the first instruction from `nop +0` to `jmp +0`, it would create a single-instruction infinite loop, never leaving that instruction. If you change almost any of the `jmp` instructions, the program will still eventually find another `jmp` instruction and loop forever.\n\nHowever, if you change the second-to-last instruction (from `jmp -4` to `nop -4`), the program terminates! The instructions are visited in this order:\n\n```\nnop +0  | 1\nacc +1  | 2\njmp +4  | 3\nacc +3  |\njmp -3  |\nacc -99 |\nacc +1  | 4\nnop -4  | 5\nacc +6  | 6\n\n```\n\nAfter the last instruction (`acc +6`), the program terminates by attempting to run the instruction below the last instruction in the file. With this change, after the program terminates, the accumulator contains the value *`8`* (`acc +1`, `acc +1`, `acc +6`).\n\nFix the program so that it terminates normally by changing exactly one `jmp` (to `nop`) or `nop` (to `jmp`). *What is the value of the accumulator after the program terminates?*\n\nYour puzzle answer was `2251`.\n\nBoth parts of this puzzle are complete! They provide two gold stars: \\*\\*\n\nAt this point, you should [return to your Advent calendar](/2020) and try another puzzle.\n\nIf you still want to see it, you can [get your puzzle input](8/input)."
  },
  "solution": {
    "first": "2014",
    "second": "2251"
  }
}